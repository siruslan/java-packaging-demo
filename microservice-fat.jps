---
type: install
version: 1.4
id: microservice-build
name: Fat Jar Microservice

globals:
  projectName: myapp
  buildDir: /var/lib/jelastic/PROJECTS/${globals.projectName}
  deployDir: /deployments
  gitUrl: https://github.com/jamesfalkner/java-packaging-demo.git
  cmd: java -jar ${globals.deployDir}/ms.jar
  
settings:   
  fields: 
  - type: list
    name: workDir
    caption: Choose a Demo App
    values:
      dropwizard-fat: DropWizard Fat
      spring-boot-fat: SpringBoot Fat
      vertx-fat: Vert.x Fat
      wildfly-swarm-fat-thin: WildFly Swarm Fat
    default: wildfly-swarm-fat-thin

nodes:
- count: 1
  cloudlets: 16
  nodeGroup: build
  nodeType: maven
  tag: 3.3.9-jdk-1.8.0_102
  
- count: 1
  cloudlets: 16
  nodeGroup: cp
  image: openjdk:jre-slim
  volumes:
  - ${globals.deployDir}
  volumeMounts:
    ${globals.deployDir}:
      sourcePath: ${globals.deployDir}
      sourceNodeGroup: build
      readOnly: true
  restartDelay: 15
  cmd: ${globals.cmd} $RUN_OPTS
  env:
    JELASTIC_EXPOSE: 8080
    RUN_OPTS: ""
  startService: false
  
onInstall:
- addBuildProject

- if ('${settings.workDir}' == 'dropwizard-fat'): 
    api: env.control.AddContainerEnvVars
    nodeGroup: cp
    vars: {"RUN_OPTS": "server ${globals.deployDir}/greeting.yml"}
       
- buildProject

onAfterBuildProject[project:${globals.projectName}]:
  api: env.control.RestartContainersByGroup
  nodeGroup: cp
  
actions:
  addBuildProject:
    api: env.deployment.AddBuildProject
    name: ${globals.projectName}
    nodeId: ${nodes.build.first.id}
    repo: ${globals.gitUrl}
    settings:
      workDir: ${settings.workDir}
    hooks: | 
      {"postBuild":"cd ${globals.buildDir}/${settings.workDir}/target; cp $(ls | grep .jar | head -n 1) ${globals.deployDir}/ms.jar; cp ../*.yml ${globals.deployDir} 2>/dev/null || :"}
  
  buildProject:
    api: env.deployment.BuildProject
    nodeId: ${nodes.build.first.id}
    project: ${globals.projectName}
    skipUpload: true
      
startPage: api/greeting      
