---
type: install
version: 1.4
id: microservice-build
name: Thin Jar Microservice

globals:
  projectName: myapp
  buildDir: /var/lib/jelastic/PROJECTS/${globals.projectName}
  deployDir: /deployments
  appDir: /home/jelastic/APP
  gitUrl: https://github.com/jamesfalkner/java-packaging-demo.git

settings:   
  fields: 
  - type: list
    name: workDir
    caption: Choose a Demo App
    values:
      spring-boot-thin: Spring Boot Thin 
      vertx-thin: Vert.x Thin
      wildfly-swarm-fat-thin: WildFly Swarm Thin
      wildfly-swarm-skinny: WildFly Swarm Skinny
    default: spring-boot-thin

nodes:
- count: 1
  cloudlets: 16
  nodeGroup: build
  nodeType: maven
  tag: 3.3.9-jdk-1.8.0_102

onInstall:

- if ('${settings.workDir}' == 'spring-boot-thin'):
  - addNodes:
      nodeType: springboot
      tag: jdk-1.8.0_162
      count: 1
      flexibleCloudlets: 16
      fixedCloudlets: 1
      nodeGroup: cp
      metadata:
        layer: cp

- if ('${settings.workDir}' == 'wildfly-swarm-fat-thin'):
  - addNodes:
      nodeType: wildfly-auto-cluster
      tag: 11.0.0.Final-jdk-1.8.0_162
      count: 1
      flexibleCloudlets: 16
      fixedCloudlets: 1
      nodeGroup: cp
      metadata:
        layer: cp

- if ('${settings.workDir}' == 'wildfly-swarm-skinny'): 
  - addNodes:
      nodeType: docker
      dockerName: openjdk
      dockerTag: jre-slim
      count: 1
      flexibleCloudlets: 16
      fixedCloudlets: 1
      nodeGroup: cp
      metadata:
        layer: cp
      dockerVolumes:
      - ${globals.deployDir}
      dockerRunCmd: java -jar ${globals.deployDir}/ms.jar ${globals.deployDir}/app.war &>> /var/log/run.log
      dockerEnvVars:
        JELASTIC_EXPOSE: 8080

- if ('${settings.workDir}' == 'vertx-thin'):       
  - addNodes:
      nodeType: docker
      dockerName: vertx/vertx3-exec
      dockerTag: latest
      count: 1
      flexibleCloudlets: 16
      fixedCloudlets: 1
      nodeGroup: cp
      metadata:
        layer: cp
      dockerEnvVars:
        JELASTIC_EXPOSE: 8080
        VERTICLE_NAME: com.example.demo.App
        VERTICLE_HOME: ${globals.deployDir}
      dockerRunCmd: run $VERTICLE_NAME -cp $VERTICLE_HOME/*
      dockerVolumes:
      - ${globals.deployDir}
    
  - api: env.deployment.AddBuildProject
    name: hollow
    nodeId: ${nodes.build.first.id}
    repo: ${globals.gitUrl}
    settings:
      workDir: joda-fraction 

  - api: env.deployment.BuildProject
    nodeId: ${nodes.build.first.id}
    project: hollow
    skipUpload: true   
    
- addBuildProject    
    
- if ('${settings.workDir}' == 'wildfly-swarm-skinny' || '${settings.workDir}' == 'vertx-thin'):
  - api: env.file.AddMountPointByGroup
    nodeGroup: cp
    path: ${globals.deployDir}
    protocol: nfs
    sourcePath: ${globals.deployDir}
    sourceNodeId: ${nodes.build.first.id}    
       
- buildProject
- if ('${settings.workDir}' == 'spring-boot-thin' || '${settings.workDir}' == 'wildfly-swarm-fat-thin'): deployProject

onAfterBuildProject[project:${globals.projectName}]:
  - if ('${settings.workDir}' == 'wildfly-swarm-fat-thin'):
      cmd[${nodes.cp.master.id}]: jem compute deploy -a false -c ROOT -u file://${globals.deployDir}/app.war

  - if ('${settings.workDir}' == 'wildfly-swarm-skinny'): restartContainers[cp]
  - if ('${settings.workDir}' == 'vertx-thin'): restartContainers[cp]

actions:
  addBuildProject:
    api: env.deployment.AddBuildProject
    name: ${globals.projectName}
    nodeId: ${nodes.build.first.id}
    repo: ${globals.gitUrl}
    deployment:
      envName: ${env.envName}
      nodeGroup: cp
    settings:
      workDir: ${settings.workDir}
    hooks: | 
      {"postBuild":"cd ${globals.buildDir}/${settings.workDir}/target; cp $(ls | grep *.jar | head -n 1) ${globals.deployDir}/ms.jar 2>/dev/null || :; cp $(ls | grep *.war | head -n 1) ${globals.deployDir}/app.war 2>/dev/null || :; cp -R thin ${globals.deployDir}/ 2>/dev/null || :"}
  
  buildProject:
    api: env.deployment.BuildProject
    nodeId: ${nodes.build.first.id}
    project: ${globals.projectName}
    skipUpload: true
    
  deployProject:
    api: env.deployment.DeployProject
    nodeId: ${nodes.build.first.id}
    project: ${globals.projectName}

startPage: api/greeting      
